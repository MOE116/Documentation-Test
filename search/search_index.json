{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Mr Peanut game STLM Documentation</p>"},{"location":"#introduction","title":"Introduction","text":"<p>This is a game project. This game is built using C# and Windows form. The main character in this game is called Mr Peanut. Mr Peanut has to engage in battle with 2 different enemies and 1 boss level enemy to complete the game.</p>"},{"location":"#sprint-overview","title":"Sprint Overview","text":"<p>The goal of this sprint is to add features to existing game code provided to our team to enhance gameplay and user experience.</p>"},{"location":"Page2/","title":"Features","text":""},{"location":"Page2/#in-game-background-music","title":"In-game Background Music","text":"<p>To implement this feature, a music file was added to the resources folder and a class  <code>MusicSettings</code> was added to the code to control the music playback actions.  MusicSettings Class<pre><code>     static MusicSettings()\n {\n     // Initialize the background music player\n     bgMusicPlayerMainMenu = new SoundPlayer(Resources.paintheme);\n     bgMusicPlayerLevel = new SoundPlayer(Resources.ShootToThrill); // Replace with the actual resource name\n }\n public static void PlayBackgroundMusicMainMenu()\n {\n     if (bgMusicPlayerMainMenu != null &amp;&amp; !isBackgroundMusicPlaying)\n     {\n         bgMusicPlayerMainMenu.PlayLooping();\n         isBackgroundMusicPlaying = true;\n     }\n }\n public static void PlayBackgroundMusicLevel()\n {\n     if (bgMusicPlayerLevel != null &amp;&amp; !isBackgroundMusicPlaying)\n     {\n         bgMusicPlayerLevel.PlayLooping();\n         isBackgroundMusicPlaying = true;\n     }\n }\n public static void StopBackgroundMusic()\n {\n     if (bgMusicPlayerMainMenu != null &amp;&amp; isBackgroundMusicPlaying)\n     {\n         bgMusicPlayerMainMenu.Stop();\n         isBackgroundMusicPlaying = false;\n     }\n     if (bgMusicPlayerLevel != null &amp;&amp; isBackgroundMusicPlaying)\n     {\n         bgMusicPlayerLevel.Stop();\n         isBackgroundMusicPlaying = false;\n     }\n }\n</code></pre> The methods defined in the class are used to start the music when the gams strarts, stop the music when the final boss battle is initialised and restart the music after</p>"},{"location":"Page2/#code-for-music-in-frmlevel","title":"Code for music in FrmLevel","text":"Start Background Music<pre><code>      private void FrmLevel_Load(object sender, EventArgs e) {\nconst int PADDING = 7;\nconst int NUM_WALLS = 19;\n  MusicSettings.StopBackgroundMusic();\n  MusicSettings.PlayBackgroundMusicLevel();\n</code></pre>"},{"location":"Page2/#code-for-music-in-frmbattle","title":"Code for music in FrmBattle","text":"Stop Background Music<pre><code>    public void SetupForBossBattle() {\n\n      picBossBattle.Location = Point.Empty;\n      picBossBattle.Size = ClientSize;\n      picBossBattle.Visible = true;\n\n      MusicSettings.StopBackgroundMusic(); //stop background music\n      SoundPlayer simpleSound = new SoundPlayer(Resources.final_battle);\n      simpleSound.Play();// play intro audio for BossBattle\n\n      tmrFinalBattle.Enabled = true;\n    }\n</code></pre> Restart Background Music<pre><code>    private void tmrFinalBattle_Tick(object sender, EventArgs e) {\n      picBossBattle.Visible = false;\n      tmrFinalBattle.Enabled = false;\n      MusicSettings.PlayBackgroundMusicLevel();  //restart background music\n\n    }\n</code></pre>"},{"location":"Page2/#flee-ability","title":"Flee Ability","text":"<p>This feature was added to the FrmBattle.cs code. This feature allows the player to flee from a battle confrontation with an enemy by clickig a button on the battle screen. The button click event is controlled by a method <code>FleeButton_Click</code>. The method closes the battle window in the event of a click on the \"Flee\" button. FleeButton click event handler<pre><code>        private void FleeButton_Click(object sender, EventArgs e)\n        {\n            instance = null;\n            Close();\n        }\n</code></pre></p>"},{"location":"Page2/#enemies-disappear-after-health-reaches-0","title":"Enemies disappear after health reaches 0.","text":"<p>To implement this feature changes were made to <code>FrmLevel.cs</code> Class inside the <code>method Fight()</code> where an event handler was added <code>frmBattle.FormClosed</code> which is triggered when frmBattle is closed and when player health is greater than zero and enemy health is less than 0 all enemy characters are hidden when this criteria is met. </p>"},{"location":"Page2/#class-frmlevelcs","title":"Class FrmLevel.cs","text":"<pre><code> frmBattle.FormClosed += (s, ev) =&gt;  // Make Enemy disappear\n         {\n             if (player.Health &gt; 0 &amp;&amp; enemy.Health &lt;= 0)\n             {\n                 if (enemy == bossKoolaid)\n                 {\n                     picBossKoolAid.Hide(); // Hides the bossKoolaid character\n                 }\n                 else if (enemy == enemyPoisonPacket)\n                 {\n                     picEnemyPoisonPacket.Hide(); // Hides the enemyPoisonPacket character\n                 }\n                 else if (enemy == enemyCheeto)\n                 {\n                     picEnemyCheeto.Hide(); // Hides the enemyCheeto character\n                 }\n             }\n\n         };\n</code></pre>"},{"location":"Page2/#character-heal","title":"Character Heal","text":"<p>In this feature the player character is able to increase their healthcount by clicking on heal button which was created in <code>FrmBattle.Designer.cs</code> and <code>FrmBattle.cs</code>. </p>"},{"location":"Page2/#in-frmbattlecs-class","title":"In FrmBattle.cs Class","text":"<p><pre><code>private int healCount = 0;   //Heal count for heal button added\n</code></pre> This integer variable keeps count of number of heals player has used. <pre><code>private void Healbtn_Click(object sender, EventArgs e)  //Player heal\n{\n    if (healCount &lt; 5)\n    {\n        if (player.Health &lt; player.MaxHealth)\n        {\n            player.AlterHealth(5);\n            UpdateHealthBars();\n            healCount++;\n\n        }\n    }\n}\n</code></pre> Created a method Called Healbtn_Click Which is associated with the click event of Heal button and checks if healcount is less then 5 is so then checks if player health is less than the maximum health and if true adds 5 health to the health bar and updates the healcount. </p>"},{"location":"Page2/#game-start-tutorial","title":"Game Start Tutorial","text":"<p>Created a new class tutorial form and called it to FrmLevel.cs to ensure the tutorial window pops up when game is started which shows up on top of the game screen and can be closed to begin playing the game. </p>"},{"location":"Page2/#inside-frmlevelcs","title":"Inside FrmLevel.cs","text":"<pre><code>private FrmTutorial frmTutorial;\nGame.player = player;\ntimeBegin = DateTime.Now;\nfrmTutorial = new FrmTutorial();           \nfrmTutorial.TopMost = true;\nfrmTutorial.Show();\n</code></pre>"},{"location":"Page2/#code-for-frmtutorialdesignercs","title":"Code for FrmTutorialDesigner.cs","text":"<pre><code>    // \n    // FrmTutorial\n    // \n    this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);\n    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n    this.ClientSize = new System.Drawing.Size(800, 450);\n    this.Controls.Add(this.textBox3);\n    this.Controls.Add(this.pictureBox3);\n    this.Controls.Add(this.pictureBox2);\n    this.Controls.Add(this.textBox2);\n    this.Controls.Add(this.textBox1);\n    this.Controls.Add(this.pictureBox1);\n    this.Name = \"FrmTutorial\";\n    this.Text = \"FrmTutorial\";\n    this.Load += new System.EventHandler(this.FrmTutorial_Load);\n    ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();\n    ((System.ComponentModel.ISupportInitialize)(this.pictureBox2)).EndInit();\n    ((System.ComponentModel.ISupportInitialize)(this.pictureBox3)).EndInit();\n    this.ResumeLayout(false);\n    this.PerformLayout();\n\n}\n</code></pre>"},{"location":"Page2/#low-health-pop-up-below-20","title":"Low Health Pop-Up (Below 20%)","text":"<p>In this feature if the player health drops below a certain percent they can see a pop warning which shows that they have low health. This is done by making changes to FrmBattle.cs inside the method <code>UpdateHealthBars()</code> where it checks the player health and shows a messagebox. <pre><code>private void UpdateHealthBars()\n {\n     float playerHealthPer = player.Health / (float)player.MaxHealth;\n     float enemyHealthPer = enemy.Health / (float)enemy.MaxHealth;\n\n     const int MAX_HEALTHBAR_WIDTH = 226;\n     lblPlayerHealthFull.Width = (int)(MAX_HEALTHBAR_WIDTH * playerHealthPer);\n     lblEnemyHealthFull.Width = (int)(MAX_HEALTHBAR_WIDTH * enemyHealthPer);\n\n     lblPlayerHealthFull.Text = player.Health.ToString();\n     lblEnemyHealthFull.Text = enemy.Health.ToString();\n\n     if (playerHealthPer &lt; 0.3)                                         // Health Warning\n     {\n         MessageBox.Show(\"Warning: Low health!\");\n\n     }\n\n }\n</code></pre></p>"},{"location":"Page2/#pause-game","title":"Pause Game","text":"<p>This feature was added to the FrmLevel.cs code. This feature allows the player to Pause and Play the Game, by clicking a button on the Game screen. The button click event is controlled by a method <code>button1_Click</code>. This method toggles the Game play in between play and pause, in the event of a click on the \"Pause\" button.</p>"},{"location":"Page2/#code","title":"Code","text":"<p><pre><code>  private void button1_Click(object sender, EventArgs e)              //Pause button \n  {\n      if (!isPaused)\n      {\n          tmrUpdateInGameTime.Stop();\n          isBackgroundMusicPlaying = false;\n          tmrPlayerMove.Stop();\n          button1.Text = \"PLAY\";\n      }\n      else\n      {\n          tmrUpdateInGameTime.Start();\n          isBackgroundMusicPlaying = true;\n          tmrPlayerMove.Start();\n          button1.Text = \"PAUSE\";\n      }\n      isPaused = !isPaused;\n  }\n</code></pre> Later I initialized the isPaused - a variable to understand the state of the game true or false.</p>"},{"location":"Page2/#code_1","title":"Code","text":"<p><pre><code>    private bool isPaused = false;         // Pause button\n</code></pre> As the pause button was having more focus to shift the focus from pause button to game I have written a code to methodoverride so the game gains the focus and to make player movement more ease.The method always returns true, indicating the key press has been handled and shouldn't be processed further by the system. <pre><code>protected override bool ProcessCmdKey(ref Message msg, Keys keydata)     //Movement change\n{\n    player.ResetMoveSpeed();\n\n    switch (keydata)\n    {\n        case Keys.Left: player.GoLeft(); break;\n        case Keys.Right: player.GoRight(); break;\n        case Keys.Up: player.GoUp(); break;\n        case Keys.Down: player.GoDown(); break;\n    }\n\n    return true;\n}\n</code></pre></p>"},{"location":"Page2/#exit-button-to-go-out-of-the-game","title":"Exit Button (to go out of the game)","text":"<p>This feature was added to the FrmBattle.cs code. This feature allows the player to Exit from a battle, by clicking a button on the battle screen. The button click event is controlled by a method <code>button1_Click</code>. The method closes the Game window in the event of a click on the \"Exit\" button.</p>"},{"location":"Page2/#code_2","title":"Code","text":"<pre><code>private void button1_Click(object sender, EventArgs e)    //Exit application\n{\n    Application.Exit();\n}\n</code></pre>"},{"location":"Page2/#ingame-adverts","title":"Ingame Adverts","text":"<p>This feature allows the developer to display advertisments to the user when they are playing the game. To implement this feature, a panel was added to the FrmBattle.Designer.cs. The function <code>Advisible</code> takes the color of the battle form background as an input to determine which advertisment image to display on the AD-panel and which url to redirect to when clicked. A method was designed to handle the panel click event as well, <code>advertisingPanel_Click</code>. To close the advert, a textbox was added to the panel. The textbox is designed to cycle through the string values in a list. At the end of the cycle the user can close the advert panel by clicking on the  box. The method <code>AdClose_Click</code> handles the click event to close  the ad panel.</p>"},{"location":"Page2/#game-story","title":"Game-Story.","text":"<p>The Game story is designed to present the player with the story behind the game and provide context for Mr Peanut's circumstances and objectives. The game story is implemented in a form, <code>FrmMainMenu</code>. A text box was added to the <code>FrmMainMenu</code> designer to display the story in lines of text the continues to cycle through the entire story as long as the MainMenu is open. The <code>scrolltimer</code> timer was added to the FrmMainMenu.designer to control the speed of the storyline cycle.</p>"},{"location":"Page2/#textured-walls-and-floor","title":"Textured Walls and Floor","text":"<p>Added Wall.png to Resource.resx and data library and further changed it in FrmLevel.cs. included a background floor texture in FrmLevelDesigner.cs and Implemented new collision logic for the new wall texture. </p>"},{"location":"Page2/#items-interactions-and-stats-change","title":"Items interactions and stats change","text":"<p>Created a new item in FrmLevel.cs Added a PictureBox of a Knife and made it be able to pick up and increase the player\u2019s attack power by multifold. Made changes to FrmLevel.cs FrmDesigner.cs, FrmBattleCharacter.  Inside FrmLevel.cs </p> <p></p>"},{"location":"Page2/#main-menu-page","title":"Main Menu Page","text":"<p>Created a new Windows form <code>FrmMainMenu.cs</code> to implement the main menu and called it to program.cs to ensure that main menu window pops up when game starts. It displays a start button and has a tutorial button. Methods <code>StartBtn_Click</code> and <code>button1_Click</code> were created in <code>FrmMainMenu.cs</code> to handle the button_click event for both buttons respectively. </p> <p></p> <p></p>"},{"location":"Page2/#game-over-screen","title":"Game Over Screen","text":"<p>This feature was added to the <code>Frmbattle.cs</code> code. This feature lets the player know the game has come to completion, a new form that will be displayed when the game ends. This form  show message <code>Game Over</code> , along with option to restart the game.</p> <p></p>"},{"location":"Page2/#always-visible-player-health-status","title":"Always Visible Player Health Status","text":"<p>This feature was added to the FrmLevel.cs code. This feature allows the player to monitor player health throughout the game, This feature enhances the gaming experience, adding to the game's strategy. A user interface element (PlayerHealth)  was added and updated it based on the player's health status.</p> <p></p>"},{"location":"page3/","title":"Contributors","text":""},{"location":"page3/#additional-features-and-contributors","title":"Additional Features and Contributors","text":"<p>This is a list of everyone that contributed to the additional features on this project.</p> <ul> <li>Ekundayo Omotehinse</li> <li>Likith Reddy Kandula</li> <li>Trivikram Devineni</li> <li>Sudhakar Reddy Gavini</li> </ul> <p>Each person added 2 features respectively to the project based on the user stories below.</p> <ul> <li>As a user, I can hear in-game soundtrack during gameplay.</li> <li>As a User, I can choose to flee from and enemy during battle.</li> <li>As a user, I can see the enemies disappear when their health reaches 0.</li> <li>As a user, I can see my character heal.</li> <li>As a user, I can see a popup which shows that my health is below 20%.</li> <li>As a user, I can see tutorial when starting a new game.</li> <li>As a user, I want to pause the game at any time So that I can take a break and play later.</li> <li>As a user, I want to create a exit button to go out of the game.</li> </ul>"}]}